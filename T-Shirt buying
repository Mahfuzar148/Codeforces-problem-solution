
/**بِسْمِ ٱللَّهِ ٱلرَّحْمَـٰنِ ٱلرَّحِيمِ */
/** المؤلف: محفوظ الرحمن */


#include<bits/stdc++.h>
using namespace std;

/** Loop */
#define lpi(n) for(int i=0;i<n;i++)
#define lpi1(n) for(int i=1;i<=n;i++)
#define lpj(m) for(int j=0;j<m;j++)
#define lpr(m) for(int j=m-1;j>=0;j--)

/**string input with space */
#define scan(a) scanf(" %[^\n]",a);
#define print(s) printf("%s\n",s)
string getString(string &str)
{
    char c;
    cin>>c;
    getline(cin,str);
    str = c + str;
}

#define gcd __gcd

/**STL*/
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define ll long long
#define pb push_back
#define is insert
#define rev(v) reverse(v.begin(),v.end())
#define srt(v) sort(v.begin(),v.end())
#define rsrt(v) sort(v.rbgin(),v.rend())
#define mne(v) *min_element(v.begin(),v.end())
#define mxe(v) *max_element(v.begin(),v.end())
#define cnt(v,a) count(v.begin(),v.end(),a)
#define ub upper_bound
#define lb lower_bound
#define st() set<int>


/** Array  */
#define ar_mne(v,n) *min_element(v,v+n)
#define ar_mxe(v,n) *max_element(v,v+n)
#define sz(ar) sizeof(ar)/sizeof(ar[0])
#define a_cnt(v,n,a) count(v,v+n,a)


int lcm(int a,int b)
{
    int ans = (a*b)/gcd(a,b);
    return ans;
}
vector<int>Divisor(int n)
{
    vector<int>v;
    int sq = sqrt(n);
    for(int i=1;i<=sq;i++)
    {
        if(n%i==0) v.pb(i);

        if(n/i!=sq) v.pb(n/i);
    }
    sort(v.begin(),v.end());
    return v;
}
int frequency(string str,string target)
{
    string::size_type pos = 0;
    int c = 0;
    while((pos = str.find(target,pos))!=string::npos)
    {
        c++;
        pos = pos +target.size();
    }
    return c;
}

string upper(string str)
{

        lpi(str.size())
        {
            if(islower(str[i]))
            {
                str[i] = toupper(str[i]);
            }
        }

         return str;

}
string lower(string str)
{
        lpi(str.size())
        {
            if(isupper(str[i]))
            {
                str[i] = tolower(str[i]);
            }
        }

        return str;
}
bool isvowel(char c)
{
    return (c=='A'||c=='a'||c=='E'||c=='e'||c=='I'||c=='i'||c=='O'||c=='o'||c=='U'||c=='u');

}
const int mx =2e5+123;
int p[mx];
int a[mx];
int b[mx];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    cin>>n;
    lpi1(n) cin>>p[i];

    lpi1(n) cin>>a[i];

     lpi1(n) cin>>b[i];

     priority_queue<int,vector<int>,greater<int>>q[5][5];

     lpi1(n)
     {
         q[a[i]][b[i]].push(p[i]);
     }
     int m;
     cin>>m;
     while(m--)
     {
        int c,f,b;
        cin>>c;
        int ans = INT_MAX ;
        lpi1(3)
        {
            if(!q[c][i].empty()&&q[c][i].top()<ans)
            {
                ans = q[c][i].top();
                f = c,b = i;
            }
        }
        lpi1(3)
        {
            if(!q[i][c].empty()&&q[i][c].top()<ans)
            {
                ans = q[i][c].top();
                f = i,b = c;
            }
        }
        if(ans==INT_MAX) cout<<-1<<endl;
        else{

            cout<<ans<<" ";
            q[f][b].pop();
        }



     }
     cout<<endl;


    return 0;

}


